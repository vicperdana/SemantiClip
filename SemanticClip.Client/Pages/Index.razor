@page "/"
@using SemanticClip.Core
@using SemanticClip.Client.Services
@using System.Net.WebSockets
@using SemanticClip.Core.Models
@using System.Text
@using System.Text.Json
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject ILogger<Index> Logger
@inject VideoProcessingApiClient VideoProcessingApiClient

<PageTitle>SemanticClip - Video Processing</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Video Processing</MudText>
        
        <MudTabs>
            <MudTabPanel Text="Upload Video">
                <MudPaper Class="pa-4 mt-4">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudTextField @bind-Value="youtubeUrl" Label="YouTube URL" Placeholder="Enter YouTube URL" />
                        
                        <MudFileUpload T="IBrowserFile" FilesChanged="AssignSelectedFile">
    <ActivatorContent>
        <MudFab Color="Color.Success"
                StartIcon="@Icons.Material.Filled.AttachFile" />
    </ActivatorContent>
</MudFileUpload>

                    </MudForm>

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ProcessVideo" Disabled="@isProcessing" Class="mt-4">
                        @if (isProcessing)
                        {
                            <MudProgressCircular Color="Color.Default" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        }
                        Process Video
                    </MudButton>
                </MudPaper>
            </MudTabPanel>
        </MudTabs>

        @if (isProcessing)
        {
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">Processing Progress</MudText>
                <MudProgressLinear Value="@progress" Color="@GetProgressColor()" Class="mb-2" />
                <MudText>@currentOperation</MudText>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                }
            </MudPaper>
        }

        @if (!string.IsNullOrEmpty(response?.Transcript))
        {
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">Transcript</MudText>
                <MudText>@response.Transcript</MudText>
            </MudPaper>
        }

        @if (response?.Chapters?.Any() == true)
        {
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">Chapters</MudText>
                <MudList T="Chapter">
                    @foreach (var chapter in response.Chapters)
                    {
                        <MudListItem T="Chapter" Text="@($"{chapter.Title} ({chapter.StartTime:hh\\:mm\\:ss} - {chapter.EndTime:hh\\:mm\\:ss})")" />
                    }
                </MudList>
            </MudPaper>
        }

        @if (!string.IsNullOrEmpty(response?.BlogPost))
        {
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">Blog Post</MudText>
                <MudText>@response.BlogPost</MudText>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private bool success;
    private string[] errors = Array.Empty<string>();
    private string youtubeUrl = string.Empty;
    private IBrowserFile? videoFile;
    private bool isProcessing;
    private VideoProcessingResponse? response;
    private int progress;
    private string currentOperation = string.Empty;
    private string errorMessage = string.Empty;

    private void AssignSelectedFile(IBrowserFile? file)
    {
        videoFile = file;
    }

    private async Task ProcessVideo()
    {
        if (string.IsNullOrEmpty(youtubeUrl) && videoFile == null)
        {
            return;
        }

        isProcessing = true;
        progress = 0;
        currentOperation = "Initializing";
        errorMessage = string.Empty;
        response = null;

        try
        {
            await VideoProcessingApiClient.ProcessVideoAsync(youtubeUrl, videoFile, async (progressUpdate) =>
            {
                progress = progressUpdate.Percentage;
                currentOperation = progressUpdate.CurrentOperation;
                errorMessage = progressUpdate.Error ?? string.Empty;

                if (progressUpdate.Status == "Completed")
                {
                    response = progressUpdate.Result;
                    isProcessing = false;
                }
                else if (progressUpdate.Status == "Failed" || !string.IsNullOrEmpty(progressUpdate.Error))
                {
                    errorMessage = progressUpdate.Error ?? "Unknown error occurred.";
                    isProcessing = false;
                }
                await InvokeAsync(StateHasChanged); // Ensure UI updates with progress (use InvokeAsync)
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing video");
            isProcessing = false;
            errorMessage = ex.Message;
            await InvokeAsync(StateHasChanged); // Ensure UI updates with error (use InvokeAsync)
        }
    }

    private Color GetProgressColor()
    {
        return errorMessage switch
        {
            "" => Color.Primary,
            _ => Color.Error
        };
    }
}
