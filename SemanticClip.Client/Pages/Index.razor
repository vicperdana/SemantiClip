@page "/"
@using SemanticClip.Core.Models
@using MudBlazor
@using MudBlazor.Utilities
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">SemanticClip - Video to Blog Converter</MudText>
        
        <MudTabs>
            <MudTab Text="YouTube URL">
                <MudTextField @bind-Value="youtubeUrl" 
                            Label="YouTube URL" 
                            Placeholder="Enter YouTube video URL"
                            FullWidth="true"
                            Class="mt-4" />
            </MudTab>
            <MudTab Text="Upload Video">
                <InputFile OnChange="OnFilesChanged"
                          Accept=".mp4,.avi,.mov"
                          class="mt-4" />
                <MudText Typo="Typo.body2" Class="mt-2">Maximum file size: 3MB</MudText>
            </MudTab>
        </MudTabs>

        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="ProcessVideo"
                   Disabled="@(!CanProcess)"
                   Class="mt-4">
            Process Video
        </MudButton>

        @if (IsProcessing)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mt-4" />
            <MudText Class="mt-2">Processing video...</MudText>
        }

        @if (ErrorDetails != null)
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                <MudText>Error Details:</MudText>
                <MudText>@ErrorDetails</MudText>
            </MudAlert>
        }

        @if (Response != null)
        {
            <MudExpansionPanels MultiExpansion="true" Class="mt-4">
                <MudExpansionPanel Text="Transcript">
                    <MudText>@Response.Transcript</MudText>
                </MudExpansionPanel>
                
                <MudExpansionPanel Text="Chapters">
                    <MudTable Items="@Response.Chapters" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Start Time</MudTh>
                            <MudTh>End Time</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Start Time">@context.StartTime.ToString(@"hh\:mm\:ss")</MudTd>
                            <MudTd DataLabel="End Time">@context.EndTime.ToString(@"hh\:mm\:ss")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>
                
                <MudExpansionPanel Text="Blog Post">
                    <MudText>@Response.BlogPost</MudText>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </MudPaper>
</MudContainer>

@code {
    private string youtubeUrl = string.Empty;
    private IBrowserFile? videoFile;
    private bool IsProcessing { get; set; }
    private VideoProcessingResponse? Response { get; set; }
    private string? ErrorDetails { get; set; }
    private const long MaxFileSize = 3000000; // 3MB

    private bool CanProcess => !string.IsNullOrEmpty(youtubeUrl) || videoFile != null;

    private void OnFilesChanged(InputFileChangeEventArgs e)
    {
        if (e.File.Size > MaxFileSize)
        {
            Snackbar.Add("File size exceeds the 3MB limit", Severity.Error);
            return;
        }
        videoFile = e.File;
        youtubeUrl = string.Empty;
    }

    private async Task ProcessVideo()
    {
        try
        {
            IsProcessing = true;
            Response = null;
            ErrorDetails = null;

            var formData = new MultipartFormDataContent();
            
            if (!string.IsNullOrEmpty(youtubeUrl))
            {
                formData.Add(new StringContent(youtubeUrl), "youtubeUrl");
            }
            
            if (videoFile != null)
            {
                var fileContent = new StreamContent(videoFile.OpenReadStream(maxAllowedSize: MaxFileSize));
                formData.Add(fileContent, "videoFile", videoFile.Name);
            }

            var response = await Http.PostAsync("api/VideoProcessing/process", formData);
            if (response.IsSuccessStatusCode)
            {
                Response = await response.Content.ReadFromJsonAsync<VideoProcessingResponse>();
                if (Response?.Status == "Failed")
                {
                    ErrorDetails = Response.ErrorMessage;
                    Snackbar.Add(Response.ErrorMessage, Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorDetails = $"Status Code: {response.StatusCode}\nError: {errorContent}";
                Snackbar.Add($"Error processing video: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ErrorDetails = $"Exception: {ex.Message}\nStack Trace: {ex.StackTrace}";
            Snackbar.Add($"Error processing video: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }
} 