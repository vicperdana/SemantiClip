using Azure.AI.Projects;
using Azure.Identity;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel;
using SemanticClip.Core.Models;
using SemanticClip.Services.Utils;
using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.ChatCompletion;
using SemanticClip.Services.Utilities;
using AgentThread = Microsoft.SemanticKernel.Agents.AgentThread;

namespace SemanticClip.Services.Steps;

// This step is to evaluate the blog post generated by the GenerateBlogPostStep using Azure AI Agent Service. 
// This will evaluate the blog post and provide feedback on its quality, relevance, and engagement level.
// There will be a maximum of 3 evaluations by default, but this number can be configured in the appsettings.json file.

public class EvaluateBlogPostStep : KernelProcessStep<VideoProcessingResponse>
{
    private ILogger<EvaluateBlogPostStep> _logger = new LoggerFactory().CreateLogger<EvaluateBlogPostStep>();
    private VideoProcessingResponse? _state;
    
    public override ValueTask ActivateAsync(KernelProcessStepState<VideoProcessingResponse> state)
    {
        _state = state.State;
        return ValueTask.CompletedTask;
    }

    private async Task<AzureAIAgent> UseTemplateForAzureAIAgentAsync(
        AgentsClient agentsClient, string blogPost)
    {
        string evaluateBlogPostYaml = EmbeddedResource.Read("EvaluateBlogPost.yaml");
        PromptTemplateConfig templateConfig = KernelFunctionYaml.ToPromptTemplateConfig(evaluateBlogPostYaml);
        KernelPromptTemplateFactory templateFactory = new();
        
        // Create Azure AI agent
        Azure.AI.Projects.Agent definition = await agentsClient.CreateAgentAsync(
            AzureAIAgentConfig.ChatModelId,
            templateConfig.Name,
            templateConfig.Description,
            templateConfig.Template);
        
        AzureAIAgent agent = new(
            definition,
            agentsClient,
            templateFactory: new KernelPromptTemplateFactory(),
            templateFormat: PromptTemplateConfig.SemanticKernelTemplateFormat)
            {
                Arguments = new()
                {
                    { "blogPost", blogPost }
                }
             };
        
        return agent;
    }

    public static class Functions
    {
        public const string EvaluateBlogPost = nameof(EvaluateBlogPost);
    }

    // Create the agent with a template and pass the latest evaluated blog post as the input
    [KernelFunction(Functions.EvaluateBlogPost)]
    public async Task EvaluateBlogPostAsync(BlogPostProcessingResponse blogstate, Kernel kernel, KernelProcessStepContext context)
    {
        _logger.LogInformation("Starting blog post evaluation process");
        BlogPostProcessingResponse _blogstate = blogstate;
        
        // Create the Azure AI agent client
        AIProjectClient client =
            AzureAIAgent.CreateAzureAIClient(AzureAIAgentConfig.ConnectionString, new AzureCliCredential());
        AgentsClient agentsClient = client.GetAgentsClient();
        var agent = await UseTemplateForAzureAIAgentAsync(
            agentsClient: agentsClient,
            blogPost: _blogstate!.BlogPosts[_blogstate.UpdateIndex]);

        // Create the chat history thread
        AgentThread thread = new AzureAIAgentThread(agentsClient);

        // Invoke the agent with the blog post
        try
        {
            var evaluation = await InvokeAgentAsync(agent, thread, _blogstate.BlogPosts[_blogstate.UpdateIndex]);
            //this._state = new VideoProcessingResponse();
            this._state!.BlogPost = evaluation;
            this._state.Transcript = _blogstate.VideoProcessingResponse.Transcript;
            string EvaluateBlogPostComplete = nameof(EvaluateBlogPostComplete);
            await context.EmitEventAsync(new() { Id = EvaluateBlogPostComplete, Data = "test value", Visibility = KernelProcessEventVisibility.Public});
            //return this._state;
        }
        catch (Exception ex)
        {
            _logger.LogError("Error evaluating blog post: {Error}", ex.Message);
            throw;
        }
    }
    
    private async Task<string> InvokeAgentAsync(AzureAIAgent agent, AgentThread thread, string input)
    {
        var message = new ChatMessageContent(AuthorRole.User, input);
        string? lastResponse = null;

        await foreach (var response in agent.InvokeAsync(message, thread))
        {
            lastResponse = response.Message.Content;
            _logger.LogInformation("Agent response: {Response}", lastResponse);
        }

        return lastResponse ?? string.Empty;
    }
}